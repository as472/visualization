{"version":3,"sources":["control-panel.js","city-pin.js","App.js","serviceWorker.js","index.js"],"names":["defaultContainer","_ref","children","react_default","a","createElement","className","ControlPanel","_renderButton","city","index","key","concat","type","name","id","defaultChecked","onClick","_this","props","onViewportChange","htmlFor","Container","this","containerComponent","CITIES","filter","state","map","PureComponent","pinStyle","cursor","fill","stroke","CityPin","_this$props","_this$props$size","size","height","viewBox","style","Object","objectSpread","transform","d","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_renderCityMarker","esm","longitude","latitude","city_pin_CityPin","setState","_onViewportChange","viewport","_goToViewport","zoom","transitionInterpolator","FlyToInterpolator","transitionDuration","bearing","pitch","_this$state","settings","assign","width","mapStyle","dragToRotate","mapboxApiAccessToken","control_panel_ControlPanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5571024.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\n\nimport CITIES from './cities.json';\n\nconst defaultContainer = ({children}) => <div className=\"control-panel\">{children}</div>;\n\nexport default class ControlPanel extends PureComponent {\n  _renderButton = (city, index) => {\n    return (\n      <div key={`btn-${index}`} className=\"input\">\n        <input\n          type=\"radio\"\n          name=\"city\"\n          id={`city-${index}`}\n          defaultChecked={city.city === 'Mumbai'}\n          onClick={() => this.props.onViewportChange(city)}\n        />\n        <label htmlFor={`city-${index}`}>{city.city}</label>\n      </div>\n    );\n  };\n\n  render() {\n    const Container = this.props.containerComponent || defaultContainer;\n\n    return (\n      <Container>\n        {CITIES.filter(city => city.state === 'In').map(this._renderButton)}\n      </Container>\n    );\n  }\n}\n","import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: 'pointer',\n  fill: '#d00',\n  stroke: 'none'\n};\n\nexport default class CityPin extends PureComponent {\n  render() {\n    const {size = 20, onClick} = this.props;\n\n    return (\n      <svg\n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{\n          ...pinStyle,\n          transform: `translate(${-size / 2}px,${-size}px)`\n        }}\n        onClick={onClick}\n      >\n        <path d={ICON} />\n      </svg>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport MapGL, {Marker,FlyToInterpolator} from 'react-map-gl';\n\nimport ControlPanel from './control-panel';\nimport CityPin from './city-pin';\n\nimport CITIES from './cities.json';\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiYXM0NzIiLCJhIjoiY2p3MGFmdnVoMDhiMDQwa3RkZno4Z2NncCJ9.MssP16N-csE73s0v2p_z8A'; // Set your mapbox token here\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        latitude: 21.146633,\n        longitude: 79.088860,\n        zoom: 4,\n        bearing: 0,\n        pitch: 0\n      }\n    };\n  }\n  _renderCityMarker = (city, index) => {\n    return (\n      <Marker \n        key={`marker-${index}`}\n        longitude={city.longitude}\n        latitude={city.latitude} >\n        <CityPin size={20} onClick={() => this.setState({})} />\n      </Marker>\n    );\n  }\n\n  _onViewportChange = viewport =>\n    this.setState({\n      viewport: {...this.state.viewport, ...viewport}\n    });\n\n  _goToViewport = ({longitude, latitude}) => {\n    this._onViewportChange({\n      longitude,\n      latitude,\n      zoom: 10,\n      transitionInterpolator: new FlyToInterpolator(),\n      transitionDuration: 2000,\n      \n    });\n  };\n\n  render() {\n    const {viewport, settings} = this.state;\n\n    return (\n      <div style={{height: '100%'}}>\n        <MapGL\n          {...viewport}\n          {...settings}\n          width=\"100%\"\n          height=\"100%\"\n          mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n          onViewportChange={this._onViewportChange}\n          dragToRotate={false}\n          mapboxApiAccessToken={MAPBOX_TOKEN}>\n    \n        {CITIES.filter(city => city.state === 'In').map(this._renderCityMarker)}\n        </MapGL>\n        <ControlPanel\n          containerComponent={this.props.containerComponent}\n          onViewportChange={this._goToViewport}\n        />\n      </div>\n    );\n  }\n}\nexport function renderToDom(container) {\n  render(<App />, container);\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
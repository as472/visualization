{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["h3ToGeoBoundary","h3GetResolution","h3ToGeo","geoToH3","h3IsPentagon","h3Distance","edgeLength","UNITS","CompositeLayer","createIterable","ColumnLayer","PolygonLayer","UPDATE_THRESHOLD_KM","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","lat","lng","h3ToPolygon","hexId","vertices","refLng","pt","deltaLng","defaultProps","Object","assign","highPrecision","coverage","type","min","max","value","x","hexagon","extruded","getColor","H3HexagonLayer","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","props","oldProps","dataChanged","updateTriggers","resolution","hasPentagon","data","iterable","index","setState","edgeLengthKM","km","_updateVertices","context","viewport","state","centerHex","hex","latitude","longitude","pixelsPerMeter","distanceScales","centerLat","centerLng","projectFlat","centerX","centerY","map","p","worldPosition","_renderPolygonLayer","_renderColumnLayer","elevationScale","fp64","material","wireframe","stroked","filled","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getFillColor","getElevation","getLineColor","getLineWidth","SubLayerClass","getSubLayerClass","forwardProps","_getForwardProps","getPolygon","getSubLayerProps","id","getPosition","diskResolution","radius","bind","layerName"],"mappings":"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","sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n  const refLng = vertices[0][0];\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n  return vertices;\n}\n\nconst defaultProps = Object.assign({}, PolygonLayer.defaultProps, {\n  highPrecision: false,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true,\n  getColor: null\n});\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)\n    ) {\n      let resolution = -1;\n      let hasPentagon = false;\n      const {iterable, objectInfo} = createIterable(props.data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexId = props.getHexagon(object, objectInfo);\n        // Take the resolution of the first hex\n        resolution = resolution < 0 ? h3GetResolution(hexId) : resolution;\n        if (h3IsPentagon(hexId)) {\n          hasPentagon = true;\n          break;\n        }\n      }\n      this.setState({\n        resolution,\n        edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n        hasPentagon,\n        vertices: null\n      });\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _shouldUseHighPrecision() {\n    const {resolution, hasPentagon} = this.state;\n    return this.props.highPrecision || hasPentagon || (resolution >= 0 && resolution <= 5);\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex = geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (\n      centerHex === hex ||\n      (centerHex && h3Distance(centerHex, hex) * edgeLengthKM < UPDATE_THRESHOLD_KM)\n    ) {\n      return;\n    }\n\n    const {pixelsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];\n      worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];\n      return worldPosition;\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      fp64,\n      material,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      // TODO - Deprecate getColor Prop in v8.0\n      getColor,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      fp64,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor: getColor || getFillColor,\n      getLineColor,\n      getLineWidth,\n      updateTriggers: {\n        getFillColor: updateTriggers.getColor || updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPolygon = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"],"file":"h3-hexagon-layer.js"}